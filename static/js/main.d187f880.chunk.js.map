{"version":3,"sources":["logo.svg","SignatureApp.js","CustomerDetails.js","Customers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SignatureApp","useState","imageURL","setImageURL","sigCanvas","useRef","clear","current","save","getTrimmedCanvas","toDataURL","modal","trigger","closeOnDocumentClick","close","ref","canvasProps","className","onClick","src","alt","id","style","display","margin","border","width","CustomerDetails","props","state","customerDetails","this","getCustomerDetails","val","prevProps","axios","get","then","response","setState","data","pdfData","atob","pdfjsLib","window","GlobalWorkerOptions","workerSrc","getDocument","promise","pdf","console","log","getPage","page","viewport","getViewport","scale","canvas","document","getElementById","context","getContext","height","renderContext","canvasContext","render","reason","error","length","bsStyle","Heading","Title","componentClass","name","Body","email","Component","Customers","selectedCustomer","customerList","getCustomerData","map","customer","key","phone","App","basename","process","exact","path","to","component","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d187f880.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useRef } from \"react\";\r\nimport Popup from \"reactjs-popup\";\r\nimport SignaturePad from \"react-signature-canvas\";\r\n\r\n\r\nimport \"./sigCanvas.css\";\r\n\r\nfunction SignatureApp() {\r\n    const [imageURL, setImageURL] = useState(null); // create a state that will contain our image url\r\n\r\n    const sigCanvas = useRef({});\r\n    var BASE64_MARKER = ';base64,';\r\n    /* a function that uses the canvas ref to clear the canvas \r\n    via a method given by react-signature-canvas */\r\n    const clear = () => sigCanvas.current.clear();\r\n\r\n    /* a function that uses the canvas ref to trim the canvas \r\n    from white spaces via a method given by react-signature-canvas\r\n    then saves it in our state */\r\n\r\n\r\n    const save = () =>\r\n        setImageURL(sigCanvas.current.getTrimmedCanvas().toDataURL(\"image/png\"));\r\n        //if (sigCanvas.current.toString.length !== 0) {\r\n        //    var base64Index = sigCanvas.current.getTrimmedCanvas().toDataURL(\"image/png\").indexOf(BASE64_MARKER) + BASE64_MARKER.length;\r\n        //    var base64 = sigCanvas.current.getTrimmedCanvas().toDataURL(\"image/png\").substring(base64Index);\r\n        //    var raw = window.atob(base64);\r\n        //    var rawLength = raw.length;\r\n        //    var array = new Uint8Array(new ArrayBuffer(rawLength));\r\n\r\n        //    for (var i = 0; i < rawLength; i++) {\r\n        //        array[i] = raw.charCodeAt(i);\r\n        //    }\r\n        //    console.log(\"data\", array);\r\n        //    alert(array);\r\n        //}\r\n    return (\r\n        <div>\r\n            <h1>Lowes Singnature pad Pad Example</h1>\r\n            <Popup\r\n                modal\r\n                trigger={<button>Open Signature Pad</button>}\r\n                closeOnDocumentClick={false}\r\n            >\r\n                {close => (\r\n                    <>\r\n                        <SignaturePad\r\n                            ref={sigCanvas}\r\n                            canvasProps={{\r\n                                className: \"signatureCanvas\"\r\n                            }}\r\n                        />\r\n                        {/* Button to trigger save canvas image */}\r\n                        <button onClick={save}>Save</button>\r\n                        <button onClick={clear}>Clear</button>\r\n                        <button onClick={close}>Close</button>\r\n                       \r\n                    </>\r\n                )}\r\n            </Popup>\r\n            <br />\r\n            <br />\r\n            {/* if our we have a non-null image url we should \r\n      show an image and pass our imageURL state to it*/}\r\n            {imageURL ? (\r\n                <img\r\n                    src={imageURL}\r\n                    alt=\"Lowes Signature APP\"\r\n                    id=\"imageid\"\r\n\r\n                    style={{\r\n                        display: \"block\",\r\n                        margin: \"0 auto\",\r\n                        border: \"1px solid black\",\r\n                        width: \"150px\"\r\n                    }}\r\n                />\r\n            ) : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignatureApp;\r\n","import React, { Component } from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport SignatureApp from './SignatureApp';\nimport axios from 'axios'\n\n//This Component is a child Component of Customers Component\nexport default class CustomerDetails extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            customerDetails: []\n        }\n    }\n\n    //Function which is called when the component loads for the first time\n    componentDidMount() {\n        this.getCustomerDetails(this.props.val)\n    }\n\n    //Function which is called whenver the component is updated\n    componentDidUpdate(prevProps) {\n\n        //get Customer Details only if props has changed\n        if (this.props.val !== prevProps.val) {\n            this.getCustomerDetails(this.props.val)\n\n        }\n    }\n\n    //Function to Load the customerdetails data from json.\n    getCustomerDetails(id) {\n        axios.get('assets/samplejson/customer' + id + '.json').then(response => {\n            this.setState({ customerDetails: response.data })\n        })\n    };\n\n    render() {\n\n        var pdfData = atob(\r\n            'JVBERi0xLjMNCiXi48 / TDQoNCjEgMCBvYmoNCjw8DQovVHlwZSAvQ2F0YWxvZw0KL091dGxpbmVzIDIgMCBSDQovUGFnZXMgMyAwIFINCj4 + DQplbmRvYmoNCg0KMiAwIG9iag0KPDwNCi9UeXBlIC9PdXRsaW5lcw0KL0NvdW50IDANCj4 + DQplbmRvYmoNCg0KMyAwIG9iag0KPDwNCi9UeXBlIC9QYWdlcw0KL0NvdW50IDINCi9LaWRzIFsgNCAwIFIgNiAwIFIgXSANCj4 + DQplbmRvYmoNCg0KNCAwIG9iag0KPDwNCi9UeXBlIC9QYWdlDQovUGFyZW50IDMgMCBSDQovUmVzb3VyY2VzIDw8DQovRm9udCA8PA0KL0YxIDkgMCBSIA0KPj4NCi9Qcm9jU2V0IDggMCBSDQo + Pg0KL01lZGlhQm94IFswIDAgNjEyLjAwMDAgNzkyLjAwMDBdDQovQ29udGVudHMgNSAwIFINCj4 + DQplbmRvYmoNCg0KNSAwIG9iag0KPDwgL0xlbmd0aCAxMDc0ID4 + DQpzdHJlYW0NCjIgSg0KQlQNCjAgMCAwIHJnDQovRjEgMDAyNyBUZg0KNTcuMzc1MCA3MjIuMjgwMCBUZA0KKCBBIFNpbXBsZSBQREYgRmlsZSApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY4OC42MDgwIFRkDQooIFRoaXMgaXMgYSBzbWFsbCBkZW1vbnN0cmF0aW9uIC5wZGYgZmlsZSAtICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNjY0LjcwNDAgVGQNCigganVzdCBmb3IgdXNlIGluIHRoZSBWaXJ0dWFsIE1lY2hhbmljcyB0dXRvcmlhbHMuIE1vcmUgdGV4dC4gQW5kIG1vcmUgKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA2NTIuNzUyMCBUZA0KKCB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDYyOC44NDgwIFRkDQooIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNjE2Ljg5NjAgVGQNCiggdGV4dC4gQW5kIG1vcmUgdGV4dC4gQm9yaW5nLCB6enp6ei4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNjA0Ljk0NDAgVGQNCiggbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDU5Mi45OTIwIFRkDQooIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNTY5LjA4ODAgVGQNCiggQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA1NTcuMTM2MCBUZA0KKCB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBFdmVuIG1vcmUuIENvbnRpbnVlZCBvbiBwYWdlIDIgLi4uKSBUag0KRVQNCmVuZHN0cmVhbQ0KZW5kb2JqDQoNCjYgMCBvYmoNCjw8DQovVHlwZSAvUGFnZQ0KL1BhcmVudCAzIDAgUg0KL1Jlc291cmNlcyA8PA0KL0ZvbnQgPDwNCi9GMSA5IDAgUiANCj4 + DQovUHJvY1NldCA4IDAgUg0KPj4NCi9NZWRpYUJveCBbMCAwIDYxMi4wMDAwIDc5Mi4wMDAwXQ0KL0NvbnRlbnRzIDcgMCBSDQo + Pg0KZW5kb2JqDQoNCjcgMCBvYmoNCjw8IC9MZW5ndGggNjc2ID4 + DQpzdHJlYW0NCjIgSg0KQlQNCjAgMCAwIHJnDQovRjEgMDAyNyBUZg0KNTcuMzc1MCA3MjIuMjgwMCBUZA0KKCBTaW1wbGUgUERGIEZpbGUgMiApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY4OC42MDgwIFRkDQooIC4uLmNvbnRpbnVlZCBmcm9tIHBhZ2UgMS4gWWV0IG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA2NzYuNjU2MCBUZA0KKCBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY2NC43MDQwIFRkDQooIHRleHQuIE9oLCBob3cgYm9yaW5nIHR5cGluZyB0aGlzIHN0dWZmLiBCdXQgbm90IGFzIGJvcmluZyBhcyB3YXRjaGluZyApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY1Mi43NTIwIFRkDQooIHBhaW50IGRyeS4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA2NDAuODAwMCBUZA0KKCBCb3JpbmcuICBNb3JlLCBhIGxpdHRsZSBtb3JlIHRleHQuIFRoZSBlbmQsIGFuZCBqdXN0IGFzIHdlbGwuICkgVGoNCkVUDQplbmRzdHJlYW0NCmVuZG9iag0KDQo4IDAgb2JqDQpbL1BERiAvVGV4dF0NCmVuZG9iag0KDQo5IDAgb2JqDQo8PA0KL1R5cGUgL0ZvbnQNCi9TdWJ0eXBlIC9UeXBlMQ0KL05hbWUgL0YxDQovQmFzZUZvbnQgL0hlbHZldGljYQ0KL0VuY29kaW5nIC9XaW5BbnNpRW5jb2RpbmcNCj4 + DQplbmRvYmoNCg0KMTAgMCBvYmoNCjw8DQovQ3JlYXRvciAoUmF2ZSBcKGh0dHA6Ly93d3cubmV2cm9uYS5jb20vcmF2ZVwpKQ0KL1Byb2R1Y2VyIChOZXZyb25hIERlc2lnbnMpDQovQ3JlYXRpb25EYXRlIChEOjIwMDYwMzAxMDcyODI2KQ0KPj4NCmVuZG9iag0KDQp4cmVmDQowIDExDQowMDAwMDAwMDAwIDY1NTM1IGYNCjAwMDAwMDAwMTkgMDAwMDAgbg0KMDAwMDAwMDA5MyAwMDAwMCBuDQowMDAwMDAwMTQ3IDAwMDAwIG4NCjAwMDAwMDAyMjIgMDAwMDAgbg0KMDAwMDAwMDM5MCAwMDAwMCBuDQowMDAwMDAxNTIyIDAwMDAwIG4NCjAwMDAwMDE2OTAgMDAwMDAgbg0KMDAwMDAwMjQyMyAwMDAwMCBuDQowMDAwMDAyNDU2IDAwMDAwIG4NCjAwMDAwMDI1NzQgMDAwMDAgbg0KDQp0cmFpbGVyDQo8PA0KL1NpemUgMTENCi9Sb290IDEgMCBSDQovSW5mbyAxMCAwIFINCj4 + DQoNCnN0YXJ0eHJlZg0KMjcxNA0KJSVFT0YNCg ==');\n\n        var pdfjsLib = window['pdfjs-dist/build/pdf'];\r\n\r\n        // The workerSrc property shall be specified.\r\n        pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';\r\n\r\n        // Using DocumentInitParameters object to load binary data.\r\n        var loadingTask = pdfjsLib.getDocument({ data: pdfData });\r\n        loadingTask.promise.then(function (pdf) {\r\n            console.log('PDF loaded');\r\n\r\n            // Fetch the first page\r\n            var pageNumber = 1;\r\n            pdf.getPage(pageNumber).then(function (page) {\r\n                console.log('Page loaded');\r\n\r\n                var scale = 1.5;\r\n                var viewport = page.getViewport({ scale: scale });\r\n\r\n                // Prepare canvas using PDF page dimensions\r\n                var canvas = document.getElementById('the-canvas');\r\n                var context = canvas.getContext('2d');\r\n                canvas.height = viewport.height;\r\n                canvas.width = viewport.width;\r\n\r\n                // Render PDF page into canvas context\r\n                var renderContext = {\r\n                    canvasContext: context,\r\n                    viewport: viewport\r\n                };\r\n                var renderTask = page.render(renderContext);\r\n                renderTask.promise.then(function () {\r\n                    console.log('Page rendered');\r\n                });\r\n            });\r\n        }, function (reason) {\r\n            // PDF loading error\r\n            console.error(reason);\r\n        });\n        if (this.state.customerDetails.length === 0)\n            return (<p>Loading Data</p>)\n        return (<div className=\"customerdetails\">\n            <Panel bsStyle=\"info\" className=\"centeralign\">\n                <Panel.Heading>\n                    <Panel.Title componentClass=\"h3\">{this.state.customerDetails.name}</Panel.Title>\n                </Panel.Heading>\n                <Panel.Body>\n\r\n                    <canvas id=\"the-canvas\"></canvas>\n                    <p>Name : {this.state.customerDetails.name}</p>\n                    <p>Email : {this.state.customerDetails.email}</p>\n             \n                    <SignatureApp />\n                </Panel.Body>\n            </Panel>\n        </div>)\n    }\n}\n","import React, { Component } from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport Button from 'react-bootstrap/lib/Button'\nimport CustomerDetails from './CustomerDetails'\n\r\n\n\nimport axios from 'axios'\n\nexport default class Customers extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selectedCustomer: 1,\n            customerList:[]\n        }\n      \n    }\n\n    //function which is called the first time the component loads\n    componentDidMount() {\n        this.getCustomerData();\n    }\n\n    //Function to get the Customer Data from json\n    getCustomerData() {\n        axios.get('assets/samplejson/customerlist.json').then(response => {\n            this.setState({ customerList: response.data })\n        })\n    };\n\n   \n\n    render() {\n        if (this.state.customerList.length == 0)\n            return (<p>Loading data</p>)\n        return (<div className=\"addmargin\">\n            <div className=\"col-md-3\">\n                {\n\n                    this.state.customerList.map(customer => <Panel bsStyle=\"info\" key={customer.name} className=\"centeralign\">\n                        <Panel.Heading>\n                            <Panel.Title componentClass=\"h3\">{customer.name}</Panel.Title>\n                        </Panel.Heading>\n                        <Panel.Body>\n                            <p>{customer.email}</p>\n                            <p>{customer.phone}</p>\n                            \n                            <Button bsStyle=\"info\" onClick={() => this.setState({ selectedCustomer: customer.id })}>\n\n\n                                Click to View Details\n                \n              </Button>\n                           \n\n                        </Panel.Body>\n                    </Panel>)\n                }\n            </div>\n            <div className=\"col-md-6\">\n                <CustomerDetails val={this.state.selectedCustomer} />\n               \n            </div>\n        </div>)\n    }\n\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport SignatureApp from './SignatureApp';\nimport './App.css';\nimport Customers from './Customers'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\n\n\nclass App extends Component {\n    render() {\n        console.log(\"Host URL\" + process.env.PUBLIC_URL);\n        return (\n\n            <Router basename={process.env.PUBLIC_URL}>\n                <div className=\"App\">\n                     <Switch>\n                        <Route exact path=\"/\" render={() => (\n                            <Redirect to=\"/customerlist\" />\n                        )} />\n                        <Route exact path='/customerlist' component={Customers} />\n                        <Route exact path='/signatureApp' component={SignatureApp} />\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}